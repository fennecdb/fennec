/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package db.fennec.dashboard

import io.vertx.core.AbstractVerticle
import io.vertx.core.Future
import io.vertx.core.Vertx
import io.vertx.core.buffer.Buffer
import io.vertx.ext.web.Router
import org.apache.commons.io.FileUtils
import java.io.ByteArrayOutputStream
import java.io.File
import java.io.IOException
import java.util.zip.GZIPOutputStream

class MainComponent {
    val greeting: String
        get() {
            return "Hello world."
        }
}

class RootVerticle : AbstractVerticle() {

    override fun start(f: Future<Void>?) {
        println("RootVerticle started")

        val router = Router.router(vertx)
        router.get("/").handler { routingContext ->
            routingContext.response()
                    .putHeader("content-type", "text/html; charset=utf-8")
                    .setStatusCode(200)
                    .end(FileUtils.readFileToString(File("./client/public/index.html"), Charsets.UTF_8))
        }
        router.get("/:fileName").handler { routingContext ->
            val fileName = routingContext.request().getParam("fileName")

            var contentType = "text/html"
            when {
                fileName.endsWith(".js") -> contentType = "application/javascript"
                fileName.endsWith(".css") -> contentType = "text/css; charset=utf-8"
                fileName.endsWith(".png") -> contentType = "image/png"
                fileName.endsWith(".jpg") -> contentType = "image/jpeg"
            }

            val data = FileUtils.readFileToByteArray(File("./client/public/$fileName"))
            routingContext.response()
                    .putHeader("content-type", contentType)
                    .putHeader("content-encoding", "gzip")
                    .setStatusCode(200)
                    .end(gzipCompress(data))
        }

        vertx.createHttpServer()
            .requestHandler(router)
            .listen(config().getInteger("http.port", 9090)) {
                if (it.succeeded()) {
                    f?.complete()
                } else {
                    f?.fail(it.cause())
                }
            }
    }

    private fun gzipCompress(uncompressedData: ByteArray): Buffer {
        var result = byteArrayOf()
        try {
            ByteArrayOutputStream(uncompressedData.size).use { bos ->
                GZIPOutputStream(bos).use { gzipOS ->
                    gzipOS.write(uncompressedData)
                    gzipOS.close()
                    result = bos.toByteArray()
                }
            }
        } catch (e: IOException) {
            e.printStackTrace()
        }

        return Buffer.buffer(result)
    }
}

fun main(args: Array<String>) {
//    println(App().greeting)

    val vertx = Vertx.vertx()
    vertx.deployVerticle(RootVerticle())
}
